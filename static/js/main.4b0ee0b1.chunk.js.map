{"version":3,"sources":["components/display.js","components/info.js","App.js","serviceWorker.js","index.js"],"names":["Display","tickers","peoplelist","length","map","person","base","target","last","market","volume","trade_url","trust_score","className","key","class","name","href","info","state","handlechange","e","setState","id","value","handlesubmit","preventDefault","props","addPerson","onSubmit","this","type","placeholder","onChange","Component","App","image","description","cryptocurrency","homepage","market_data","public_interest_stats","localization","newPerson","newarr","console","log","city","axios","get","cors","then","resolve","data","alert","lang","loca","categories","links","repos_url","github","blockchain_site","a","b","c","f","g","h","i","k","l","src","large","alt","d","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b0ee0b1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Display.css'\r\n\r\n\r\nconst Display = ({ tickers }) => {\r\n\r\n   \r\n    \r\n    const peoplelist = tickers.length ? tickers.map( person =>{\r\n        \r\n        let {base,target,last,market,volume,trade_url,trust_score}=person;\r\n        return( <div className='person' key={last}>\r\n        {/* <p class=\"tickers\"><strong>Tickers</strong></p> */}\r\n        <ul>\r\n        <p class=\"tickers\"><strong>Tickers</strong></p>\r\n            <li>Base: {base}, Target: {target}, Market Name: {market.name}, Volume: {volume}, <a href={trade_url}>Trade URL</a>, Trust Score: {trust_score}</li>\r\n        </ul>\r\n       \r\n        </div>)\r\n    }) : (<p> </p>);//No data found....\r\n    return(\r\n        <div className='display-div'>\r\n            {peoplelist}\r\n        </div>\r\n    );\r\n}\r\nexport default Display;\r\n    ","import React, {Component} from 'react';\r\nimport './Display.css'\r\n\r\nclass info extends Component{\r\n\r\n    state = {\r\n        name: '',\r\n    }\r\n\r\n    handlechange= (e) =>{\r\n        //console.log(e.target.id);\r\n        this.setState({  \r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    handlesubmit = (e) =>{\r\n        e.preventDefault();\r\n       // console.log(this.state);\r\n        //this.props.addPerson(this.state);\r\n        this.props.addPerson(this.state);\r\n        this.setState({\r\n            name: '',\r\n        })\r\n        \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='search'>\r\n        <form onSubmit={this.handlesubmit}>\r\n            \r\n            <input type=\"search\" id='name' placeholder='Please enter language name ' onChange={this.handlechange}></input>\r\n            <input type=\"submit\" id=\"submit\" value=\"Search\" name=\"search\"></input> \r\n             <i className=\"fa fa-search\"></i>\r\n            </form>\r\n        </div>\r\n        )}\r\n\r\n}\r\n\r\nexport default info;","import React from 'react';\n//import { Map, GoogleApiWrapper, Marker  } from 'google-maps-react';\nimport './App.css';\nimport Display from './components/display';\nimport Info from './components/info';\nimport axios from 'axios';\n\nclass App extends React.Component{\n  state={ image:{},\n          description: [],\n          cryptocurrency:[],\n          homepage:[],\n          market_data:[],\n          tickers:[],\n          public_interest_stats:[],\n          localization:[]\n\n}\n \n\naddPerson = (newPerson) =>{\n  \n let newarr = [newPerson];\n console.log(newarr)\n \n this.setState({\n   city : newarr\n })\n console.log(newarr[0])\n const cors = `https://cors-anywhere.herokuapp.com/` \n  axios.get(cors+`https://api.coingecko.com/api/v3/coins/bitcoin`)\n   .then( resolve => {\n     if(resolve.data.length < 1)\n     {//console.log(resolve.data);\n     alert(\"Please enter correct spelling\");\n    }\n            else{\n\n              switch(newarr[0].name)\n              {\n                default:var lang='en';break;\n                case \"korean\": lang='ko';break;\n                case \"Arabic\": lang='ar';break;\n              }if(resolve.data.length < 1)\n            {\n              alert(\"Please enter correct localization\")\n\n            }else{\n              switch(newarr[0].name)\n              {\n                default:var loca='en';break;\n                case \"Japanese\": loca='ja';break;\n                case \"korean\": lang='ko';break;\n                case \"Arabic\": lang='ar';break;\n              }\n            }\n\n     console.log(resolve.data);\n     \n     this.setState({\n       description : resolve.data.description[`${lang}`],\n       image : resolve.data.image,\n       cryptocurrency: resolve.data.categories,\n       homepage:[resolve.data.links.homepage[0],resolve.data.links.repos_url.github[0],resolve.data.links.blockchain_site[0]], \n       tickers:resolve.data.tickers, \n       localization : resolve.data.localization[`${loca}`]\n        \n      })\n    }}\n    )\n}\n\n\ncomponentDidUpdate(){\n  console.log(this.state.tickers)\n  console.log(this.state.description)\n  }\n\n  render(){\n    let a,b,c,d,e,f,g,h,i,k,l;\n   if(this.state.description.length!=0)\n   {\n   a= <h2>{this.state.cryptocurrency[0]}</h2>;\n   b= <img src={this.state.image.large} alt=\"\"></img>;f=<br/>;\n\n   e= <a href={this.state.homepage[0]}><strong>Home Page</strong></a>;\n   f=<br/>;\n   g=<a href={this.state.homepage[1]}><strong>Repos_URL</strong></a>;\n   i=<br/>;\n   l=<a href={this.state.homepage[2]}><strong>Blockchain URL</strong></a>;\n\n   c= <p><strong>Description: </strong>{this.state.description}</p>;\n   k= <p>Localization: {this.state.localization}</p>;\n  //  d= <p>{this.state.public_interest_stats[0]}</p>;\n   h=<Display tickers={this.state.tickers}></Display>;\n   }\n  return (\n    <div className=\"App\">\n      <h1 className='center purple-text'>BITCOIN-APP</h1>\n      <Info addPerson={this.addPerson}></Info>\n      {a}\n      {b}\n      {e}{f}\n      {g}{i}\n      {l}\n      {c}\n      {k}\n      {d}\n      {h}\n\n      \n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}